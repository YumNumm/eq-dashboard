name: Deploy
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      ios:
        description: "Build iOS app"
        required: false
        default: true
        type: boolean
      android:
        description: "Build Android app"
        required: false
        default: true
        type: boolean
      web:
        description: "Build Web app"
        required: false
        default: true
        type: boolean
      macos:
        description: "Build macOS app"
        required: false
        default: true
        type: boolean
      windows:
        description: "Build Windows app"
        required: false
        default: true
        type: boolean
      linux:
        description: "Build Linux app"
        required: false
        default: true
        type: boolean

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      deploy-ios: ${{ steps.define-environment-matrix.outputs.deploy-ios }}
      deploy-android: ${{ steps.define-environment-matrix.outputs.deploy-android }}
      deploy-web: ${{ steps.define-environment-matrix.outputs.deploy-web }}
      deploy-macos: ${{ steps.define-environment-matrix.outputs.deploy-macos }}
      deploy-windows: ${{ steps.define-environment-matrix.outputs.deploy-windows }}
      deploy-linux: ${{ steps.define-environment-matrix.outputs.deploy-linux }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Decide which app to deploy
        id: define-environment-matrix
        run: |
          platforms=()
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.ios }}" = "true" ]; then
              platforms+=("ios")
            fi
            if [ "${{ inputs.android }}" = "true" ]; then
              platforms+=("android")
            fi
            if [ "${{ inputs.web }}" = "true" ]; then
              platforms+=("web")
            fi
            if [ "${{ inputs.macos }}" = "true" ]; then
              platforms+=("macos")
            fi
            if [ "${{ inputs.windows }}" = "true" ]; then
              platforms+=("windows")
            fi
            if [ "${{ inputs.linux }}" = "true" ]; then
              platforms+=("linux")
            fi
          elif [ "${{ github.event_name }}" = "push" ]; then
            # コミットメッセージに [release only $platform] を含む場合は、
            # そのプラットフォームのみデプロイする
            commit_message="${{ github.event.head_commit.message }}"
            echo "コミットメッセージ: $commit_message"
            if [[ "$commit_message" =~ \[release[[:space:]]+only[[:space:]]+([a-z,[:space:]]+)\] ]]; then
              # [release only platform1,platform2] の形式からプラットフォームを抽出
              IFS=',' read -ra selected_platforms <<< "${BASH_REMATCH[1]}"
              # 空白を削除して配列に追加
              for platform in "${selected_platforms[@]}"; do
                platform=$(echo "$platform" | tr -d '[:space:]')
                if [[ " ios android web macos windows linux " =~ " $platform " ]]; then
                  platforms+=("$platform")
                fi
                echo "platform: $platform"
              done
            else
              # [release only] タグがない場合は全プラットフォームをデプロイ
              echo "commit message does not contain [release only platform], deploy all platforms"
              platforms+=("ios" "android" "web" "macos" "windows" "linux")
            fi
          else
            echo "Unknown event name: ${{ github.event_name }}"
            exit 1
          fi

          echo "デプロイするプラットフォーム: ${platforms[@]}"
          for platform in "${platforms[@]}"; do
            echo "deploy-${platform}=true" >> $GITHUB_OUTPUT
          done

  build-ios:
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.deploy-ios }}
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup application runtime & Resolve dependencies
        uses: ./.github/actions/setup-application-runtime

      - name: Setup macOS Environment
        uses: ./.github/actions/setup-macos-environment

      - name: Create App Store Connect API Token
        uses: ./.github/actions/generate-app-store-connect-jwt
        with:
          app_store_connect_api_key_id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          app_store_connect_api_key_base64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}

      - name: Fetch latest build number
        id: fetch-latest-build-number
        run: |
          platform=IOS
          app_id=6739848784
          build_number=$(
            curl -s https://api.appstoreconnect.apple.com/v1/builds \
            -G \
            -d "filter[platform]=${platform}" \
            -d "filter[id]=${app_id}" \
            -d "sort=-version" \
            -d "fields[builds]=version" \
            -d "limit=1" | \
            jq -r '.data | if length == 0 then 0 else .[0].attributes.version end'
          )
          build_number=$((build_number + 1))
          echo "build_number=${build_number}" >> $GITHUB_OUTPUT
          echo "Build Number set to ${build_number}."

      - name: Build iOS
        working-directory: app
        env:
          BUILD_NUMBER: ${{ steps.fetch-latest-build-number.outputs.build_number }}
        run: |
          echo "BUILD_NUMBER=${BUILD_NUMBER}"
          flutter build ipa --no-codesign --build-number=${BUILD_NUMBER}

      - name: Extract App Store Connect API Key
        working-directory: app/ios
        run: echo "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 -d > AuthKey.p8

      - name: Archive
        working-directory: app
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release archive \
            -archivePath build/ios/Runner.xcarchive \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO | xcbeautify

          xcodebuild -exportArchive \
            -archivePath build/ios/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath . \
            -allowProvisioningUpdates \
            -authenticationKeyIssuerID ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }} \
            -authenticationKeyID ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }} \
            -authenticationKeyPath ${{ github.workspace }}/app/ios/AuthKey.p8 | xcbeautify

      - name: Upload ipa as artifact
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: EQDashboard-ios.ipa
          path: app/eqdashboard.ipa

  deploy-ios:
    needs: build-ios
    name: Deploy iOS
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Download ipa
        uses: actions/download-artifact@v4.1.1
        with:
          name: EQDashboard-ios.ipa
          path: build

      - name: List files
        run: ls -lah build/

      - name: Setup macOS Environment
        uses: ./.github/actions/setup-macos-environment

      - name: Extract App Store Connect API Key
        run: |
          mkdir ~/.private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 -d > ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
          ls -l ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      - name: Upload Ipa to App Store Connect
        run: |
          xcrun altool \
            --upload-app \
            -f build/eqdashboard.ipa \
            --type ios \
            --apiIssuer ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }} \
            --apiKey ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}

  build-web:
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.deploy-web }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup application runtime & Resolve dependencies
        uses: ./.github/actions/setup-application-runtime

      - name: Build Web
        working-directory: app
        run: flutter build web --release --wasm

      # https://github.com/actions/upload-artifact
      - name: Upload Web as artifact
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: web
          path: app/build/web/

  deploy-web:
    needs: build-web
    name: Deploy Web
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Download Web artifact
        uses: actions/download-artifact@v4.1.1
        with:
          name: web
          path: .
      - name: Deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: 4270d8a14dfc1f866629099a788c93e2
          command: pages deploy . --project-name eq-dashboard


  build-macos:
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.deploy-macos }}
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup application runtime & Resolve dependencies
        uses: ./.github/actions/setup-application-runtime

      - name: Setup macOS Environment
        uses: ./.github/actions/setup-macos-environment

      - name: Create App Store Connect API Token
        uses: ./.github/actions/generate-app-store-connect-jwt
        with:
          app_store_connect_api_key_id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          app_store_connect_api_key_base64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}

      - name: Fetch latest build number
        id: fetch-latest-build-number
        run: |
          platform=MACOS
          app_id=6739848784
          build_number=$(
            curl -s https://api.appstoreconnect.apple.com/v1/builds \
            -G \
            -d "filter[platform]=${platform}" \
            -d "filter[id]=${app_id}" \
            -d "sort=-version" \
            -d "fields[builds]=version" \
            -d "limit=1" | \
            jq -r '.data | if length == 0 then 0 else .[0].attributes.version end'
          )
          build_number=$((build_number + 1))
          echo "build_number=${build_number}" >> $GITHUB_OUTPUT
          echo "Build Number set to ${build_number}."

      - name: Generate Build Config
        working-directory: app
        env:
          BUILD_NUMBER: ${{ steps.fetch-latest-build-number.outputs.build_number }}
        run: flutter build macos --build-number=${BUILD_NUMBER} --config-only

      - name: Extract App Store Connect API Key
        run: |
          mkdir ~/.private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 -d > ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
          ls -l ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      - name: Archive
        working-directory: app
        run: |
          xcrun xcodebuild archive \
            -workspace macos/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/macos/Runner.xcarchive \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO | xcbeautify

      - name: Export
        working-directory: app
        run: |
          xcodebuild -exportArchive \
            -archivePath build/macos/Runner.xcarchive \
            -exportOptionsPlist macos/ExportOptions.plist \
            -exportPath build/macos/Release \
            -allowProvisioningUpdates \
            -authenticationKeyIssuerID ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }} \
            -authenticationKeyID ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }} \
            -authenticationKeyPath ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8 \
            | xcbeautify

      - name: Upload app as artifact
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: EQDashboard-macos.pkg
          path: app/build/macos/Release/EQDashboard.pkg

  deploy-macos:
    needs: build-macos
    name: Deploy macOS
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - name: Download app
        uses: actions/download-artifact@v4.1.1
        with:
          name: EQDashboard-macos.pkg
          path: .

      - name: Extract App Store Connect API Key
        run: |
          mkdir ~/.private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 -d > ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
          ls -l ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      - name: Deploy
        run: |
          xcrun altool \
            --upload-app \
            -f EQDashboard.pkg \
            --type macos \
            --apiIssuer ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }} \
            --apiKey ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}

  build-linux:
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.deploy-linux }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Linux Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl git \
            unzip xz-utils \
            zip libglu1-mesa \
            clang cmake git \
            ninja-build pkg-config \
            libgtk-3-dev liblzma-dev \
            libstdc++-12-dev libsecret-1-dev libjsoncpp-dev \
            libsecret-1-0

      - name: Setup application runtime & Resolve dependencies
        uses: ./.github/actions/setup-application-runtime

      - name: Build Linux
        working-directory: app
        run: flutter build linux --release

      - name: Upload Linux as artifact
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: EQDashboard-linux
          path: app/build/linux/

  build-windows:
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.deploy-windows }}
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup application runtime & Resolve dependencies
        uses: ./.github/actions/setup-application-runtime

      - name: Build Windows
        working-directory: app
        run: flutter build windows --release

      - name: Upload Windows as artifact
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: EQDashboard-windows
          path: app/build/windows/
